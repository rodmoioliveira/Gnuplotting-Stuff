#!/bin/bash

#########################################################################
##
## TITLE:         gpwrk2
## AUTHOR:        Rodolfo MÃ³i de Oliveira
## DESCRIPTION:   Gnuplot script for plotting latency graphs from
##                wrk2 `--latency` data
## DATE:          07. Mar. 2023
## LICENSE:       MIT
##
#########################################################################

declare TRACE
[[ "${TRACE}" == 1 ]] && set -o xtrace
set -o errexit
set -o pipefail
set -o noclobber

FONT="Merriweather"
FONT_SCALE=1
HEIGHT=700
LINE_WIDTH=1.5
TITLE="Latency Distribution"
WIDTH=1700

clean_tempdir() {
  rm -rf "${TMP_DIR}"
}

trap clean_tempdir EXIT

mktempdir() {
  if ! TMP_DIR=$(mktemp -d -t gnuplot-wrk-XXXXXXXXXX); then
    printf 1>&2 "Couldn't create %s\n" "${TMP_DIR}"
    exit 1
  fi

  TMP_DIR_CSV="${TMP_DIR}/csv"
  if ! mkdir "${TMP_DIR_CSV}"; then
    printf 1>&2 "Couldn't create %s\n" "${TMP_DIR_CSV}"
    exit 1
  fi

  TMP_XLABELS_CSV="${TMP_DIR}/xlabels.csv"
  echo "1.0,0.0,0" >"${TMP_XLABELS_CSV}"
  echo "10.0,0.0,90%" >>"${TMP_XLABELS_CSV}"
  echo "100.0,0.0,99%" >>"${TMP_XLABELS_CSV}"
  echo "1000.0,0.0,99.9%" >>"${TMP_XLABELS_CSV}"
  echo "10000.0,0.0,99.99%" >>"${TMP_XLABELS_CSV}"
  echo "100000.0,0.0,99.999%" >>"${TMP_XLABELS_CSV}"
  echo "1000000.0,0.0,99.9999%" >>"${TMP_XLABELS_CSV}"
  echo "10000000.0,0.0,100%" >>"${TMP_XLABELS_CSV}"
}

wrk_to_csv() {
  for file in ${FILES[*]}; do
    filename=$(echo "${file}" | awk -F'/' '{print $NF}' | awk -F'.' '{print $1}')
    csv="${TMP_DIR_CSV}/${filename}.csv"

    rg '^ {2,10}\d' --no-filename --no-line-number "${file}" |
      rg request -v |
      rg threads -v |
      awk '{print $4","$1}' |
      sed '1i percentile,'"${filename}"'' >"${csv}"
  done
}

usage_short() {
  local help_text
  help_text=$(
    cat <<"EOF"
Gnuplot script for plotting latency graphs from wrk2 `--latency` data

Usage: gpwrk2 [OPTIONS] <FILES>...

Arguments:
  <FILES>...    A list of space-separated FILES in wrk2 `--latency` format

Options:
      --title <TITLE>             Plot title [default: Latency Distribution]
      --font <FONT>               Plot font [default: Merriweather]
      --font-scale <FONT-SCALE>   Plot font scale [default: 1]
      --height <HEIGHT>           Plot height [default: 700]
      --width <WIDTH>             Plot width [default: 1700]
      --line-width <LINE-WIDTH>   Plot latency line width [default: 1.5]
  -o, --output <OUTPUT>           Output plot file [default: gpwrk2.png]
  -h, --help                      Print help information (use `--help` for more detail)
EOF
  )

  printf 1>&2 "%s\n" "${help_text}"
}

usage_long() {
  local help_text
  help_text=$(
    cat <<"EOF"
Gnuplot script for plotting latency graphs from wrk2 `--latency` data

Usage:
  gpwrk2 [OPTIONS] <FILES>...

Arguments:
  <FILES>...
          A list of space-separated FILES in wrk2 `--latency` format

Options:
      --title <TITLE>
          Plot title [default: Latency Distribution]

      --font <FONT>
          Plot font [default: Merriweather]

      --font-scale <FONT-SCALE>
          Plot font scale [default: 1]

      --height <HEIGHT>
          Plot height [default: 700]

      --width <WIDTH>
          Plot width [default: 1700]

      --line-width <LINE-WIDTH>
          Plot latency line width [default: 1.5]

  -o, --output <OUTPUT>
          Output plot file [default: gpwrk2.png]

  -h, --help
          Print help information (use `-h` for a summary)

Get some data:
  wrk2 -t1 -c1 -d30s -R1 --latency "http://jsonplaceholder.typicode.com/todos/1" | tee 1.wrk
  wrk2 -t8 -c10 -d30s -R10 --latency "http://jsonplaceholder.typicode.com/todos/1" | tee 10.wrk
  wrk2 -t8 -c25 -d30s -R25 --latency "http://jsonplaceholder.typicode.com/todos/1" | tee 25.wrk

Plot from data:
  fd . -e wrk | gpwrk2
  gpwrk2 *.wrk
EOF
  )

  printf 1>&2 "%s\n" "${help_text}"
}

error_no_input() {
  printf 1>&2 "No <FILES> input ...\n"
  printf 1>&2 "\nFor more information try '--help'\n"
  exit 1
}

args_parse() {
  local args
  if ! args=$(getopt -a -n gpwrk2 -o ho: --long help,output:,width:,height:,font:,title:,font-scale:,line-width: -- "$@"); then
    printf 1>&2 "\nFor more information try '--help'\n"
    exit 1
  fi
  eval set -- "${args}"

  while [[ $# -gt 0 ]]; do
    case "$1" in
    -o | --output)
      shift
      OUTPUT="$1"
      ;;
    --width)
      shift
      WIDTH="$1"
      ;;
    --height)
      shift
      HEIGHT="$1"
      ;;
    --font)
      shift
      FONT="$1"
      ;;
    --font-scale)
      shift
      FONT_SCALE="$1"
      ;;
    --line-width)
      shift
      LINE_WIDTH="$1"
      ;;
    --title)
      shift
      TITLE="$1"
      ;;
    -h)
      usage_short
      exit 0
      ;;
    --help)
      usage_long
      exit 0
      ;;
    --)
      shift
      break
      ;;
    *) usage_long ;;
    esac
    shift
  done

  if [[ -p /dev/stdin ]]; then
    FILES="$(cat -)"

    if [[ -z "${FILES}" ]]; then
      error_no_input
    fi
  else
    FILES=()
    while IFS= read -r i; do FILES+=("${i}"); done < <(echo "$@")

    if [[ -z "${FILES[*]}" ]]; then
      error_no_input
    fi
  fi
}

handle_output() {
  if [[ -z "${OUTPUT}" ]]; then
    OUTPUT_FILE="gpwrk2.png"
  else
    OUTPUT_FILE="${OUTPUT}"
  fi
}

args_validate() {
  handle_output
}

calc_font_size() {
  echo "${1} * ${FONT_SCALE}" | bc
}

plot() {
  local counter=1
  local -a csv_files
  local plot_directives="plot '${TMP_XLABELS_CSV}' with labels center offset 0, -1 point notitle, "

  while IFS= read -r q; do csv_files+=("${q}"); done < <(ls -1v "${TMP_DIR_CSV}")
  for csv in "${csv_files[@]}"; do
    plot_directives+=$(printf '"%s" using 1:2 with lines linestyle %d, ' "${TMP_DIR_CSV}/${csv}" "${counter}")
    counter=$((counter + 1))
  done

  gnuplot <<EOF
set terminal pngcairo enhanced size "${WIDTH}","${HEIGHT}" font "${FONT},$(calc_font_size 16)"

set title "${TITLE}" font "${FONT}-Bold,$(calc_font_size 24)"
set datafile separator ','

set tics out font ",$(calc_font_size 12)"
set xtics rotate
set grid xtics ytics

set key bottom center outside autotitle columnhead font ",$(calc_font_size 14)" horizontal
set ylabel "Milliseconds" offset 1,0 font "${FONT}-Bold,$(calc_font_size 14)"
set xlabel "Percentile" offset 0,-1.5 font "${FONT}-Bold,$(calc_font_size 14)"

set style line  1 linecolor rgb '#a6cee3' linetype 1 linewidth ${LINE_WIDTH} pointtype 1 pointsize 1
set style line  2 linecolor rgb '#1f78b4' linetype 1 linewidth ${LINE_WIDTH} pointtype 1 pointsize 1
set style line  3 linecolor rgb '#b2df8a' linetype 1 linewidth ${LINE_WIDTH} pointtype 1 pointsize 1
set style line  4 linecolor rgb '#33a02c' linetype 1 linewidth ${LINE_WIDTH} pointtype 1 pointsize 1
set style line  5 linecolor rgb '#fb9a99' linetype 1 linewidth ${LINE_WIDTH} pointtype 1 pointsize 1
set style line  6 linecolor rgb '#e31a1c' linetype 1 linewidth ${LINE_WIDTH} pointtype 1 pointsize 1
set style line  7 linecolor rgb '#fdbf6f' linetype 1 linewidth ${LINE_WIDTH} pointtype 1 pointsize 1
set style line  8 linecolor rgb '#ff7f00' linetype 1 linewidth ${LINE_WIDTH} pointtype 1 pointsize 1
set style line  9 linecolor rgb '#cab2d6' linetype 1 linewidth ${LINE_WIDTH} pointtype 1 pointsize 1
set style line 10 linecolor rgb '#6a3d9a' linetype 1 linewidth ${LINE_WIDTH} pointtype 1 pointsize 1
set style line 11 linecolor rgb '#ffff99' linetype 1 linewidth ${LINE_WIDTH} pointtype 1 pointsize 1
set style line 12 linecolor rgb '#b15928' linetype 1 linewidth ${LINE_WIDTH} pointtype 1 pointsize 1

set logscale x
unset xtics
set bmargin 6

set border back
set output "${OUTPUT_FILE}"

set terminal pngcairo font ",$(calc_font_size 12)"
$(echo "${plot_directives}" | sd ", $" '')
exit
EOF
}

open_plot() {
  xdg-open "${OUTPUT_FILE}"
}

main() {
  args_parse "$@"
  args_validate
  mktempdir
  wrk_to_csv
  plot
  open_plot
}

main "$@"
