#!/bin/bash

#########################################################################
##
## TITLE:         pwrk2
## AUTHOR:        Rodolfo Mói de Oliveira
## DESCRIPTION:   Gnuplot script for plotting latency graphs from
##                wrk2 `--latency` data
## DATE:          07. Mar. 2023
## LICENSE:       MIT
##
#########################################################################

declare TRACE
[[ "${TRACE}" == 1 ]] && set -o xtrace
set -o errexit
set -o pipefail
set -o noclobber

TITLE="Latency Distribution"
FONT="Merriweather"
FONT_SCALE=1
HEIGHT=700
WIDTH=1700
HAS_KEYS=false
KEY_MARGIN=6
LINE_WIDTH=1.5
PREVIEW_PLOT=true
VERBOSE=false
COLOR_FG="#000000"
COLOR_BG="#ffffff"

clean_tempdir() {
  rm -rf "${TMP_DIR}"
}

trap clean_tempdir EXIT

mktempdir() {
  if ! TMP_DIR=$(mktemp -d -t gnuplot-wrk2-XXXXXXXXXX); then
    printf 1>&2 "Couldn't create %s\n" "${TMP_DIR}"
    exit 1
  fi

  TMP_DIR_CSV="${TMP_DIR}/csv"
  if ! mkdir "${TMP_DIR_CSV}"; then
    printf 1>&2 "Couldn't create %s\n" "${TMP_DIR_CSV}"
    exit 1
  fi
}

wrk2_to_csv() {
  if [[ "${VERBOSE}" == true ]]; then
    printf 1>&2 "Processing files ... \n"
  fi

  for file in ${FILES[*]}; do
    if [[ "${VERBOSE}" == true ]]; then
      printf 1>&2 "  [Processing] %s ... " "${file}"
    fi

    filename=$(echo "${file}" | awk -F'/' '{print $NF}' | awk -F'.' '{print $1}')
    csv="${TMP_DIR_CSV}/${filename}.csv"
    sd_cmd="sd '${KEY_FROM}' '${KEY_TO}'"
    data_name=$(echo "${filename}" | eval "$sd_cmd")

    if [[ "${HAS_KEYS}" == true ]]; then
      printf "1/1-percentile,%s,percentile\n" "${data_name}" >"${csv}"
      rg '^ {2,10}\d' --no-filename --no-line-number "${file}" |
        rg request -v |
        rg threads -v |
        awk '{print $4","$1","$2}' >>"${csv}"
    else
      printf "1/1-percentile,%s,percentile\n" "${filename}" >"${csv}"
      rg '^ {2,10}\d' --no-filename --no-line-number "${file}" |
        rg request -v |
        rg threads -v |
        awk '{print $4","$1","$2}' >>"${csv}"
    fi

    if [[ "${VERBOSE}" == true ]]; then
      printf 1>&2 "Done!\n"
    fi
  done
}

usage_short() {
  local help_text
  help_text=$(
    cat <<"EOF"
Gnuplot script for plotting latency graphs from wrk2 `--latency` data

Usage: pwrk2 [OPTIONS] <FILE>...

Arguments:
  <FILE>...    A list of space-separated FILES in wrk2 `--latency` format

Options:
      --color-bg <COLOR>          Set background color [default: #ffffff]
      --color-fg <COLOR>          Set foreground color [default: #000000]
  -f, --font <FONT>               Plot font [default: Merriweather]
  -g, --height <HEIGHT>           Plot height [default: 700]
  -l, --line <LINE-WIDTH>         Plot latency line width [default: 1.5]
  -k, --kmargin <KMARGIN>         Bottom plot margin for key labels [default: 6]
  -o, --output <OUTPUT>           Output plot file [default: pwrk2.png]
  -p, --preview <BOOL>            Whether or not should open the plot after generation [default: true] [possible values: true, false]
  -s, --scale <FONT-SCALE>        Plot font scale [default: 1]
  -t, --title <TITLE>             Plot title [default: Latency Distribution]
  -v, --verbose <BOOL>            Whether or not to be verbose [default: false] [possible values: true, false]
  -w, --width <WIDTH>             Plot width [default: 1700]
      --key-from <REGEX>          Regex to find in the name of <FILE>, used to set key labels
      --key-to <REPLACE>          Regex to replace the name of <FILE>, used to set key labels
  -h, --help                      Print help information (use `--help` for more detail)
EOF
  )

  printf 1>&2 "%s\n" "${help_text}"
}

usage_long() {
  local help_text
  help_text=$(
    cat <<"EOF"
Gnuplot script for plotting latency graphs from wrk2 `--latency` data

Usage:
  pwrk2 [OPTIONS] <FILE>...

Arguments:
  <FILE>...
          A list of space-separated FILES in wrk2 `--latency` format

Options:
      --color-bg <COLOR>
          Set background color [default: #ffffff]

      --color-fg <COLOR>
          Set foreground color [default: #000000]

  -f, --font <FONT>
          Plot font [default: Merriweather]

  -g, --height <HEIGHT>
          Plot height [default: 700]

  -l, --line <LINE-WIDTH>
          Plot latency line width [default: 1.5]

  -k, --kmargin <KMARGIN>
          Bottom plot margin for key labels [default: 6]

  -o, --output <OUTPUT>
          Output plot file [default: pwrk2.png]

  -p, --preview <BOOL>
          Whether or not should open the plot after generation [default: true] [possible values: true, false]

  -s, --scale <FONT-SCALE>
          Plot font scale [default: 1]

  -t, --title <TITLE>
          Plot title [default: Latency Distribution]

  -v, --verbose <BOOL>
          Whether or not to be verbose [default: false] [possible values: true, false]

  -w, --width <WIDTH>
          Plot width [default: 1700]

      --key-from <REGEX>
          Regex to find in the name of <FILE>, used to set key labels

      --key-to <REPLACE>
          Regex to replace the name of <FILE>, used to set key labels

  -h, --help
          Print help information (use `--help` for more detail)

Examples:

  Get some data
    wrk2 -t1 -c1 -d30s -R1 --latency "http://jsonplaceholder.typicode.com/todos/1" | tee 1.hgrm
    wrk2 -t8 -c10 -d30s -R10 --latency "http://jsonplaceholder.typicode.com/todos/1" | tee 10.hgrm
    wrk2 -t8 -c25 -d30s -R25 --latency "http://jsonplaceholder.typicode.com/todos/1" | tee 25.hgrm

  Plot from data
    fd . -e hgrm | pwrk2
    pwrk2 *.hgrm

  Rename plot labels
    fd . -e hgrm | pwrk2 --key-from '(\d{1,10})' --key-to '${1} R/s' --output data/plot/pwrk2.png

  Change plot styles
    fd . -e hgrm | pwrk2 \
      --color-bg "#000000" \
      --color-fg "#ffffff" \
      --font 'Roboto' \
      --scale 1.5 \
      --line 3 \
      --width 1500 \
      --height 1200 \
      --kmargin 7

Author:
  Rodolfo Mói de Oliveira (https://github.com/rodmoioliveira)

Bug Report:
  If you wish to file a bug report, please go to
  https://github.com/rodmoioliveira/Gnuplotting-Stuff/issues
EOF
  )

  printf 1>&2 "%s\n" "${help_text}"
}

error_no_input() {
  printf 1>&2 "No <FILES> input ...\n"
  printf 1>&2 "\nFor more information try '--help'\n"
  exit 1
}

error_keys() {
  printf 1>&2 "if some --key-{from,to} is present, the other must also be present ...\n"
  printf 1>&2 "\nFor more information try '--help'\n"
  exit 1
}

error_preview() {
  printf 1>&2 "the flag --preview <BOOL> must be 'true' or 'false' ...\n"
  printf 1>&2 "\nFor more information try '--help'\n"
  exit 1
}

error_verbose() {
  printf 1>&2 "the flag --verbose <BOOL> must be 'true' or 'false' ...\n"
  printf 1>&2 "\nFor more information try '--help'\n"
  exit 1
}

deps_validate() {
  summary=()
  is_valid=true

  deps=("bc" "gawk" "getopt" "gnuplot" "rg" "sd")
  for dep in "${deps[@]}"; do
    if ! command -v "${dep}" &> /dev/null; then
      summary+=("[Missing] ${dep}")
      is_valid=false
    else
      summary+=("[OK] ${dep}")
    fi
  done

  if [[ "${is_valid}" == false ]]; then
    printf 1>&2 "You have missing dependencies.\n"
    printf 1>&2 "You must install the missing dependencies for pwrk2 work correctly.\n\n"
    printf 1>&2 "  %s\n" "${summary[@]}"
    exit 1
  fi

  if [[ "${VERBOSE}" == true ]]; then
    printf 1>&2 "Checking dependencies ...\n"
    printf 1>&2 "  %s\n" "${summary[@]}"
    printf 1>&2 "\n"
  fi
}

args_parse() {
  local args
  if ! args=$(getopt -a -n pwrk2 -o ho:v:f:g:l:k:p:s:t:w: --long help,preview:,verbose:,output:,width:,height:,font:,title:,scale:,line:,key-from:,key-to:,kmargin:,color-fg:,color-bg: -- "$@"); then
    printf 1>&2 "\nFor more information try '--help'\n"
    exit 1
  fi
  eval set -- "${args}"

  while [[ $# -gt 0 ]]; do
    case "$1" in
    -o | --output)
      shift
      OUTPUT="$1"
      ;;
    -w | --width)
      shift
      WIDTH="$1"
      ;;
    -g | --height)
      shift
      HEIGHT="$1"
      ;;
    -f | --font)
      shift
      FONT="$1"
      ;;
    -s | --scale)
      shift
      FONT_SCALE="$1"
      ;;
    -l | --line)
      shift
      LINE_WIDTH="$1"
      ;;
    -t | --title)
      shift
      TITLE="$1"
      ;;
    --key-from)
      shift
      KEY_FROM="$1"
      ;;
    --key-to)
      shift
      KEY_TO="$1"
      ;;
    -k | --kmargin)
      shift
      KEY_MARGIN="$1"
      ;;
    --color-fg)
      shift
      COLOR_FG="$1"
      ;;
    --color-bg)
      shift
      COLOR_BG="$1"
      ;;
    -p | --preview)
      shift
      PREVIEW_PLOT="$1"
      ;;
    -v | --verbose)
      shift
      VERBOSE="$1"
      ;;
    -h)
      usage_short
      exit 0
      ;;
    --help)
      usage_long
      exit 0
      ;;
    --)
      shift
      break
      ;;
    *) usage_long ;;
    esac
    shift
  done

  if [[ -p /dev/stdin ]]; then
    FILES="$(cat -)"

    if [[ -z "${FILES}" ]]; then
      error_no_input
    fi
  else
    FILES=()
    while IFS= read -r i; do FILES+=("${i}"); done < <(echo "$@")

    if [[ -z "${FILES[*]}" ]]; then
      error_no_input
    fi
  fi
}

arg_key() {
  if [[ -z "${KEY_FROM}" && -z "${KEY_TO}" ]]; then
    HAS_KEYS=false
  elif [[ -z "${KEY_FROM}" && -n "${KEY_TO}" ]]; then
    error_keys
  elif [[ -n "${KEY_FROM}" && -z "${KEY_TO}" ]]; then
    error_keys
  else
    HAS_KEYS=true
  fi
}

arg_preview() {
  if ! [[ "${PREVIEW_PLOT}" == true || "${PREVIEW_PLOT}" == false ]]; then
    error_preview
  fi
}

arg_verbose() {
  if ! [[ "${VERBOSE}" == true || "${VERBOSE}" == false ]]; then
    error_verbose
  fi
}

arg_output() {
  if [[ -z "${OUTPUT}" ]]; then
    OUTPUT_FILE="pwrk2.png"
  else
    OUTPUT_FILE="${OUTPUT}"
  fi
}

args_validate() {
  arg_key
  arg_preview
  arg_verbose
  arg_output
}

calc_font_size() {
  echo "${1} * ${FONT_SCALE}" | bc
}

plot_draw() {
  if [[ "${VERBOSE}" == true ]]; then
    printf 1>&2 "\nGenerating plot ...\n"
    printf 1>&2 "  [Plotting] %s ... " "${OUTPUT_FILE}"
  fi

  local counter=1
  local -a csv_files
  local plot_directives="plot "

  while IFS= read -r q; do csv_files+=("${q}"); done < <(ls -1v "${TMP_DIR_CSV}")
  for csv in "${csv_files[@]}"; do
    plot_directives+=$(printf '"%s" using 1:2 with lines linestyle %d, ' "${TMP_DIR_CSV}/${csv}" "${counter}")
    counter=$((counter + 1))
  done

  gnuplot <<EOF
set terminal pngcairo enhanced background rgb "${COLOR_BG}" size "${WIDTH}","${HEIGHT}" font "${FONT},$(calc_font_size 16)"

set border linecolor rgb "${COLOR_FG}"
set grid linecolor rgb "${COLOR_FG}"
set key textcolor rgb "${COLOR_FG}"
set title textcolor rgb "${COLOR_FG}"
set xlabel textcolor rgb "${COLOR_FG}"
set xtics textcolor rgb "${COLOR_FG}"
set ylabel textcolor rgb "${COLOR_FG}"
set ytics textcolor rgb "${COLOR_FG}"

set title "${TITLE}" font "${FONT}-Bold,$(calc_font_size 24)"
set datafile separator ','

set tics out nomirror font ",$(calc_font_size 12)"
set grid back xtics ytics
set xrange [1.0:10000000.0]
set xtics ("0%%" 1.0, "90%%" 10.0, "99%%" 100.0, "99.9%%" 1000.0, "99.99%%" 10000.0, "99.999%%" 100000.0, "99.9999%%" 1000000.0,"100%%" 10000000.0)

set key bottom center outside autotitle columnhead font ",$(calc_font_size 14)" horizontal
set ylabel "Milliseconds" offset 0,0 font "${FONT}-Bold,$(calc_font_size 14)"
set xlabel "Percentile" offset 0,0 font "${FONT}-Bold,$(calc_font_size 14)"

set style line  1 linecolor rgb '#a6cee3' linetype 1 linewidth ${LINE_WIDTH} pointtype 1 pointsize 1
set style line  2 linecolor rgb '#1f78b4' linetype 1 linewidth ${LINE_WIDTH} pointtype 1 pointsize 1
set style line  3 linecolor rgb '#b2df8a' linetype 1 linewidth ${LINE_WIDTH} pointtype 1 pointsize 1
set style line  4 linecolor rgb '#33a02c' linetype 1 linewidth ${LINE_WIDTH} pointtype 1 pointsize 1
set style line  5 linecolor rgb '#fb9a99' linetype 1 linewidth ${LINE_WIDTH} pointtype 1 pointsize 1
set style line  6 linecolor rgb '#e31a1c' linetype 1 linewidth ${LINE_WIDTH} pointtype 1 pointsize 1
set style line  7 linecolor rgb '#fdbf6f' linetype 1 linewidth ${LINE_WIDTH} pointtype 1 pointsize 1
set style line  8 linecolor rgb '#ff7f00' linetype 1 linewidth ${LINE_WIDTH} pointtype 1 pointsize 1
set style line  9 linecolor rgb '#cab2d6' linetype 1 linewidth ${LINE_WIDTH} pointtype 1 pointsize 1
set style line 10 linecolor rgb '#6a3d9a' linetype 1 linewidth ${LINE_WIDTH} pointtype 1 pointsize 1
set style line 11 linecolor rgb '#ffff99' linetype 1 linewidth ${LINE_WIDTH} pointtype 1 pointsize 1
set style line 12 linecolor rgb '#b15928' linetype 1 linewidth ${LINE_WIDTH} pointtype 1 pointsize 1

set logscale x
set bmargin "${KEY_MARGIN}"

set border 3 linewidth 2
set output "${OUTPUT_FILE}"

set terminal pngcairo font ",$(calc_font_size 12)"
$(echo "${plot_directives}" | sd ", $" '')
exit
EOF

if [[ "${VERBOSE}" == true ]]; then
  printf 1>&2 "Done!\n"
fi
}

plot_preview() {
  if [[ "${PREVIEW_PLOT}" == true ]]; then
    unameOut="$(uname -s)"

    case "${unameOut}" in
      Linux*) xdg-open "${OUTPUT_FILE}" ;;
      Darwin*) open "${OUTPUT_FILE}" ;;
      CYGWIN* | MINGW* | *) ;;
    esac
  fi
}

main() {
  args_parse "$@"
  args_validate
  deps_validate
  mktempdir
  wrk2_to_csv
  plot_draw
  plot_preview
}

main "$@"
